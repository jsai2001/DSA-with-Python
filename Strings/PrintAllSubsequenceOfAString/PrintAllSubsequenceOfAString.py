''' 
String is a subsequence of a given String, 
that is generated by deleting some character of a given string 
without changing its order. 

Input : abc
Output : ['', 'a', 'b', 'ab', 'c', 'ac', 'bc', 'abc']

Bit manipulation approch

We can represent each subsequence of a string as a binary number, 
where each bit represents whether or not a character is included in the subsequence. 
For example, for the string “abc”, the subsequence “ab” can be represented as 0b11 (binary representation of 3), 
and the subsequence “c” can be represented as 0b100 (binary representation of 4). 
We can generate all subsequences by iterating over all binary numbers from 0 to 2^n - 1 and including characters whose corresponding bits are set to 1. 
The time complexity of this algorithm is O(n * 2^n), where n is the length of the given string 

Time Complexity: O(n* 2^n)
Auxiliary Space: O(n)
'''

def printSubSequences(str):
    subseqarr = []
    n = len(str)
    for i in range(2**n): # This loop determines the possible ways of having subsequence of the string we have using binary representation as discussed above , 
        substr = ""
        for j in range(n): #W.r.t above generated subsequence binary string id 'i' , we are iterating through the string and retrieving only the characters of string where we have 1 in corresponding binary version of i
            if(i & (1<<j)):
                substr += str[j] #use only corresponding characters where we have 1 in binary version of i
        subseqarr.append(substr)
    return subseqarr

str = "abc"
print(printSubSequences(str))

'''
The above program uses bit manipulation to generate all subsequences of a given string. 
The outer loop iterates over all binary numbers from 0 to 2^n - 1, 
and the inner loop includes characters whose corresponding bits are set to 1. 
The space complexity of this algorithm is O(1) because we are not using any extra space 
'''